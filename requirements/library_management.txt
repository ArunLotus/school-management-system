To create a database schema for library management, you'll need tables and fields that capture information about books, library materials, borrowers, and transactions. Here's a simplified example of the tables and their fields:

1. **Books Table**:
   - `book_id` (Primary Key)
   - `title`
   - `author`
   - `ISBN` (International Standard Book Number)
   - `publication_year`
   - `genre`
   - `total_copies`
   - `available_copies`

2. **Library Materials Table** (for non-book items such as DVDs, magazines, etc.):
   - `material_id` (Primary Key)
   - `title`
   - `material_type` (e.g., DVD, magazine, etc.)
   - `total_copies`
   - `available_copies`

3. **Borrowers (Patrons) Table**:
   - `patron_id` (Primary Key)
   - `first_name`
   - `last_name`
   - `email`
   - `phone_number`
   - `address`

4. **Check-Outs Table** (to record when a book or material is borrowed):
   - `checkout_id` (Primary Key)
   - `item_id` (Foreign Key, references `book_id` or `material_id`)
   - `patron_id` (Foreign Key)
   - `checkout_date`
   - `due_date`

5. **Check-Ins Table** (to record when a book or material is returned):
   - `checkin_id` (Primary Key)
   - `checkout_id` (Foreign Key)
   - `checkin_date`

This is a basic database schema, and you can expand it to meet the specific needs of your library management system. Additional fields and tables may be required if your system has more complex requirements, such as multiple branches or advanced tracking features.

It's also important to establish relationships between these tables using foreign keys to maintain data integrity. For example, the `item_id` in the Check-Outs Table is a foreign key referencing the `book_id` or `material_id` in the respective tables. Similarly, the `patron_id` in the Check-Outs Table is a foreign key referencing the `patron_id` in the Borrowers Table.

Additionally, you should enforce business rules and constraints in your database to ensure that, for instance, the number of available copies is properly updated when items are checked out or checked in.

Remember that this is a simplified example, and in a real-world library management system, you would also consider indexing, search functionality, and other features to make the system efficient and user-friendly.